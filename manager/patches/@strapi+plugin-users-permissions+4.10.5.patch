diff --git a/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js b/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js
index 31c612c..7d5a77e 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js
@@ -128,4 +128,14 @@ module.exports = (baseURL) => ({
     callback: `${baseURL}/patreon/callback`,
     scope: ['identity', 'identity[email]'],
   },
+  gkhub: {
+    enabled: true,
+    icon: '',
+    key: '',
+    secret: '',
+    basicHeader: '',
+    openPlanetSecret: '',
+    callback: `${baseURL}/gkhub/callback`,
+    scope: ['user:email', 'generate']
+  }
 });
diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js b/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js
index 875b4e9..5d406d2 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js
@@ -331,6 +331,35 @@ const getInitialProviders = ({ purest }) => ({
         };
       });
   },
+
+  async gkhub({ accessToken }) {
+    const gkhub = purest({ provider: 'gkhub' });
+    const { body: userBody } = await gkhub.get('user').auth(accessToken).request();
+
+    // Temporary solution: Validating user roles
+    //                     Only providers and secretariat have access to the manager
+    const validRoles = [
+      'admin',
+      'geo-provider',
+      'geo-secretariat',
+    ];
+
+    // Checking roles
+    const roles = userBody?.roles || [];
+    const hasValidRoles = roles.some(role => validRoles.includes(role.name));
+
+    // Only return values if roles are valid
+    // Without a return, the entry is not created in the strapi and user can't login.
+    if (hasValidRoles) {
+      return {
+        username: userBody.username,
+        email: userBody.email
+      };
+    }
+
+    return false;
+  }
+
 });
 
 module.exports = () => {
